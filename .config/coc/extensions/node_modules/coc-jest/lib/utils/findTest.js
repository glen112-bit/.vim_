"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findNearestTest = void 0;
const coc_nvim_1 = require("coc.nvim");
const findNearestTest = () => __awaiter(void 0, void 0, void 0, function* () {
    const doc = yield coc_nvim_1.workspace.document;
    const { nvim } = coc_nvim_1.workspace;
    const lineNumber = (yield nvim.call('line', '.')) - 1;
    return findTestName(doc, lineNumber);
});
exports.findNearestTest = findNearestTest;
const findTestName = (doc, lineNumber) => {
    const line = doc.getline(lineNumber);
    const matchedArray = line.match(/^\s*(?:it|test|describe)\((["'])(.+)\1/);
    if (matchedArray != undefined) {
        return matchedArray[2];
    }
    return findTestName(doc, lineNumber - 1);
};
//# sourceMappingURL=findTest.js.map