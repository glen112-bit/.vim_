"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeJestConfigCmd = void 0;
const coc_nvim_1 = require("coc.nvim");
const path_1 = __importDefault(require("path"));
const configs_1 = require("../configs");
const common_1 = require("./common");
const makeJestConfigCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const jestConfigPath = yield findJestConfigPath();
    if (jestConfigPath === "") {
        return "";
    }
    return `--config ${jestConfigPath}`;
});
exports.makeJestConfigCmd = makeJestConfigCmd;
const findJestConfigPath = () => __awaiter(void 0, void 0, void 0, function* () {
    const document = yield coc_nvim_1.workspace.document;
    const config = yield (0, configs_1.getConfiguration)();
    const configFileName = config.get("configFileName");
    let cwd = coc_nvim_1.workspace.cwd;
    if (document) {
        const uri = coc_nvim_1.Uri.parse(document.uri);
        cwd = uri.scheme == "file" ? path_1.default.dirname(uri.fsPath) : cwd;
    }
    const configPath = yield (0, common_1.findUp)(configFileName, cwd);
    if (configPath === "") {
        return "";
    }
    return `${configPath}/${configFileName}`;
});
//# sourceMappingURL=jestConfig.js.map