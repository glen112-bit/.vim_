"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFileExist = exports.findUp = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const findUp = (filename, cwd) => __awaiter(void 0, void 0, void 0, function* () {
    if (cwd === "/") {
        return "";
    }
    const packagePath = path_1.default.join(cwd, filename);
    const exists = yield (0, exports.isFileExist)(packagePath);
    if (exists) {
        return cwd;
    }
    return (0, exports.findUp)(filename, path_1.default.dirname(cwd));
});
exports.findUp = findUp;
const isFileExist = (filepath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stat = yield util_1.default.promisify(fs_1.default.stat)(filepath);
        return stat.isFile();
    }
    catch (e) {
        return false;
    }
});
exports.isFileExist = isFileExist;
//# sourceMappingURL=common.js.map