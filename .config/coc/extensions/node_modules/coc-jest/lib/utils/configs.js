"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguration = exports.getJestBinCmd = exports.isWatchCmd = exports.isWatchAllCmd = exports.getTerminalPosition = exports.getJestFlagsFromConfig = void 0;
const coc_nvim_1 = require("coc.nvim");
let optionsNames = [
    "detectLeaks",
    "watchman",
    "detectOpenHandles",
    "forceExit",
    "noStackTrace",
];
const getJestFlagsFromConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    let args = [];
    const config = yield (0, exports.getConfiguration)();
    for (let name of optionsNames) {
        if (config.get(name)) {
            args.push(`--${name}`);
        }
    }
    if (config.get("customFlags")) {
        for (let flag of config.get("customFlags")) {
            args.push(`--${flag}`);
        }
    }
    return args.join(" ");
});
exports.getJestFlagsFromConfig = getJestFlagsFromConfig;
const getTerminalPosition = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = yield (0, exports.getConfiguration)();
    const terminalPosition = config.get('terminalPosition');
    if (terminalPosition === undefined) {
        return 'right';
    }
    return terminalPosition;
});
exports.getTerminalPosition = getTerminalPosition;
const isWatchAllCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const watch = yield isWatch();
    if (watch) {
        return ' --watchAll';
    }
    return '';
});
exports.isWatchAllCmd = isWatchAllCmd;
const isWatchCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const watch = yield isWatch();
    if (watch) {
        return ' --watch';
    }
    return '';
});
exports.isWatchCmd = isWatchCmd;
const isWatch = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = yield (0, exports.getConfiguration)();
    return config.get('watch');
});
const getJestBinCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = yield (0, exports.getConfiguration)();
    return config.get("binCommand");
});
exports.getJestBinCmd = getJestBinCmd;
const getConfiguration = () => __awaiter(void 0, void 0, void 0, function* () {
    let document = yield coc_nvim_1.workspace.document;
    return coc_nvim_1.workspace.getConfiguration('jest', document ? document.uri : undefined);
});
exports.getConfiguration = getConfiguration;
//# sourceMappingURL=configs.js.map